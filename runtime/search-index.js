var searchIndex = {};
searchIndex["dynasmrt"] = {"doc":"","items":[[3,"Assembler","dynasmrt","This struct is an implementation of a dynasm runtime. It supports incremental\ncompilation as well as multithreaded execution with simultaneous compilation.\nIts implementation ensures that no memory is writeable and executable at the\nsame time.",null,null],[3,"Executor","","A read-only shared reference to the executable buffer inside an Assembler. By\nlocking it the internal ExecutableBuffer can be accessed and executed.",null,null],[3,"ExecutableBuffer","","A structure holding a buffer of executable memory",null,null],[8,"DynAsmApi","","This trait represents the interface that must be implemented to allow\nthe dynasm preprocessor to assemble into a datastructure.",null,null],[10,"offset","","Report the current offset into the assembling target",0,null],[10,"push","","Push a byte into the assembling target",0,null],[11,"push_8","","Push a signed byte into the assembling target",0,null],[11,"push_16","","Push a signed word into the assembling target",0,null],[11,"push_32","","Push a signed doubleword into the assembling target",0,null],[11,"push_64","","Push a signed quadword into the assembling target",0,null],[10,"align","","Push nops until the assembling target end is aligned to the given alignment",0,null],[10,"local_label","","Record the definition of a local label",0,null],[10,"global_label","","Record the definition of a global label",0,null],[10,"dynamic_label","","Record the definition of a dynamic label",0,null],[10,"forward_reloc","","Record a relocation spot for a forward reference to a local label",0,null],[10,"backward_reloc","","Record a relocation spot for a backward reference to a local label",0,null],[10,"global_reloc","","Record a relocation spot for a reference to a global label",0,null],[10,"dynamic_reloc","","Record a relocation spot for a reference to a dynamic label",0,null],[11,"runtime_error","","This function is called in when a runtime error has to be generated. It panics.",0,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"extend","","",1,null],[11,"extend","","",1,null],[11,"offset","","",1,null],[11,"push","","",1,null],[11,"align","","",1,null],[11,"global_label","","",1,null],[11,"global_reloc","","",1,null],[11,"dynamic_label","","",1,null],[11,"dynamic_reloc","","",1,null],[11,"local_label","","",1,null],[11,"forward_reloc","","",1,null],[11,"backward_reloc","","",1,null],[11,"new","","Create a new Assembler instance",1,{"inputs":[],"output":{"name":"assembler"}}],[11,"commit","","Commit the assembled code from a temporary buffer to the executable buffer.\nThis method requires write access to the execution buffer and therefore\nhas to obtain a lock on the datastructure. When this method is called, all\nlabels will be resolved, and the result can no longer be changed.",1,null],[11,"finalize","","Consumes the assembler to return the internal ExecutableBuffer. This\nmethod can fail if an Executor currently holds a lock on the datastructure,\nin which case it will return itself.",1,null],[11,"reader","","Creates a read-only reference to the internal ExecutableBuffer that must\nbe locked to access it. Multiple of such read-only locks can be obtained\nat the same time, but as long as they are alive they will block any commit()\ncalls.",1,null],[11,"lock","","Gain read-access to the internal ExecutableBuffer. While the returned guard\nis alive, it can be used to read and execute from the ExecutableBuffer.\nAny pointers created to the Executablebuffer should no longer be used when\nthe guard is dropped.",2,null],[11,"ptr","","Obtain a pointer into the executable memory from an offset into it.\nWhen an offset returned from DynAsmApi::offset is used, the resulting pointer\nwill point to the start of the first instruction after the offset call,\nwhich can then be jumped or called to divert control flow into the executable\nbuffer. Note that if this buffer is accessed through an Executor, these pointers\nwill only be valid as long as its lock is held. When no locks are held, \nThe assembler is free to relocate the executable buffer when it requires\nmore memory than available. ",3,null],[11,"deref","","",3,null],[14,"Pointer!","","This macro takes a *const pointer from the source operand, and then casts it to the desired return type.\nthis allows it to be used as an easy shorthand for passing pointers as dynasm immediate arguments.",null,null],[14,"MutPointer!","","Preforms the same action as the Pointer! macro, but casts to a *mut pointer.",null,null]],"paths":[[8,"DynAsmApi"],[3,"Assembler"],[3,"Executor"],[3,"ExecutableBuffer"]]};
initSearch(searchIndex);
